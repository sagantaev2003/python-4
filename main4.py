import requests
import json
import random

API_BASE = "https://rickandmortyapi.com/api"

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–ø—ã—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
xp = 0
history = []

# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
def save_history():
    with open("history.txt", "w", encoding="utf-8") as f:
        for h in history:
            f.write(h + "\n")
    print("üìÇ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ history.txt")

# –ø–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏
def find_character():
    global xp
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ")
    params = {"name": name}
    response = requests.get(f"{API_BASE}/character", params=params)

    if response.status_code == 200:
        data = response.json()
        if "results" in data and data["results"]:
            char = data["results"][0]
            print()
            print("–ò–º—è:", char["name"])
            print("–°—Ç–∞—Ç—É—Å:", char["status"])
            print("–í–∏–¥:", char["species"])
            print("–õ–æ–∫–∞—Ü–∏—è:", char["location"]["name"])
            print("–≠–ø–∏–∑–æ–¥–æ–≤:", len(char["episode"]))

            xp += 10
            history.append(f"–ù–∞–π–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {char['name']}")

            save = input("–î–æ–±–∞–≤–∏—Ç—å –≤ —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—é? (y/n): ")
            if save.lower() == "y":
                save_to_encyclopedia(char)
        else:
            print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", response.status_code)

# –ø–æ–∏—Å–∫ —ç–ø–∏–∑–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É
def find_episode():
    global xp
    num = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞: ")
    response = requests.get(f"{API_BASE}/episode/{num}")
    if response.status_code == 200:
        ep = response.json()
        print("–ù–∞–∑–≤–∞–Ω–∏–µ:", ep["name"])
        print("–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:", ep["air_date"])
        print("–ö–æ–¥ —ç–ø–∏–∑–æ–¥–∞:", ep["episode"])
        print("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ (–ø–µ—Ä–≤—ã–µ 5):")
        for c in ep["characters"][:5]:
            cdata = requests.get(c).json()
            print("-", cdata["name"])

        xp += 15
        history.append(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω —ç–ø–∏–∑–æ–¥: {ep['name']}")
    else:
        print("‚ùå –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ø–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏—è –ø–æ –∏–º–µ–Ω–∏
def find_location():
    global xp
    name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏: ")
    params = {"name": name}
    response = requests.get(f"{API_BASE}/location", params=params)
    if response.status_code == 200:
        data = response.json()
        if "results" in data and data["results"]:
            loc = data["results"][0]
            print("–ù–∞–∑–≤–∞–Ω–∏–µ:", loc["name"])
            print("–¢–∏–ø:", loc["type"])
            print("–ò–∑–º–µ—Ä–µ–Ω–∏–µ:", loc["dimension"])
            print("–ñ–∏—Ç–µ–ª–µ–π:", len(loc["residents"]))

            xp += 10
            history.append(f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {loc['name']}")
        else:
            print("‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("–û—à–∏–±–∫–∞:", response.status_code)

# —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
def random_character():
    global xp
    rid = random.randint(1, 826)
    response = requests.get(f"{API_BASE}/character/{rid}")
    if response.status_code == 200:
        char = response.json()
        print("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!")
        print("–ò–º—è:", char["name"])
        print("–°—Ç–∞—Ç—É—Å:", char["status"])
        print("–í–∏–¥:", char["species"])
        print("–õ–æ–∫–∞—Ü–∏—è:", char["location"]["name"])

        xp += 5
        history.append(f"–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {char['name']}")
    else:
        print("–û—à–∏–±–∫–∞:", response.status_code)

# —Å–ø–∏—Å–æ–∫ –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã
def list_episodes():
    global xp
    url = f"{API_BASE}/episode"
    while url:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            for ep in data["results"]:
                print(f"{ep['id']}. {ep['name']} ({ep['episode']})")
            url = data["info"]["next"]
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ø–∏–∑–æ–¥–æ–≤")
            break

    xp += 20
    history.append("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤")

# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å .json
def save_to_encyclopedia(char):
    entry = {
        "name": char["name"],
        "status": char["status"],
        "species": char["species"],
        "location": char["location"]["name"],
        "episodes_count": len(char["episode"])
    }

    try:
        with open("encyclopedia.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    data.append(entry)

    with open("encyclopedia.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ encyclopedia.json")

# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    global xp, history
    while True:
        print("\n–ú–µ–Ω—é:")
        print("1 ‚Äì –ù–∞–π—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print("2 ‚Äì –ù–∞–π—Ç–∏ —ç–ø–∏–∑–æ–¥")
        print("3 ‚Äì –ù–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏—é")
        print("4 ‚Äì –°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")
        print("5 ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ø–∏–∑–æ–¥–æ–≤")
        print("6 ‚Äì –í—ã—Ö–æ–¥")
        print()
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == "1":
            find_character()
        elif choice == "2":
            find_episode()
        elif choice == "3":
            find_location()
        elif choice == "4":
            random_character()
        elif choice == "5":
            list_episodes()
        elif choice == "6":
            print("\nüéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
            print(f"–í–∞—à –æ–ø—ã—Ç: {xp} XP")
            print("–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:")
            for h in history:
                print("-", h)
            save_history()  # history.txt
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

if __name__ == "__main__":
    main()
