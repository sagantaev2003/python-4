import requests
import json
import random
import datetime

API_BASE = "https://rickandmortyapi.com/api"

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—ã—Ç –∏ –∏—Å—Ç–æ—Ä–∏—è
xp = 0
history = []

# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—è
def save_history():
    with open("history.txt", "w", encoding="utf-8") as f:
        for h in history:
            f.write(h + "\n")
    print("üìÇ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ history.txt")

# –ø–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂
def find_character():
    global xp
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ")
    params = {"name": name}
    response = requests.get(f"{API_BASE}/character", params=params)

    if response.status_code == 200:
        data = response.json()
        if "results" in data and data["results"]:
            char = data["results"][0]
            print()
            print("–ò–º—è:", char["name"])
            print("–°—Ç–∞—Ç—É—Å:", char["status"])
            print("–í–∏–¥:", char["species"])
            print("–õ–æ–∫–∞—Ü–∏—è:", char["location"]["name"])
            print("–≠–ø–∏–∑–æ–¥–æ–≤:", len(char["episode"]))

            xp += 10
            history.append(f"–ù–∞–π–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {char['name']}")

            save = input("–î–æ–±–∞–≤–∏—Ç—å –≤ —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—é? (y/n): ")
            if save.lower() == "y":
                save_to_encyclopedia(char)

            rate = input("–û—Ü–µ–Ω–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç 1 –¥–æ 5 (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
            if rate.isdigit() and 1 <= int(rate) <= 5:
                save_to_encyclopedia(char, rating=int(rate))
        else:
            print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", response.status_code)

# –ø–æ–∏—Å–∫ —ç–ø–∏–∑–æ–¥
def find_episode():
    global xp
    num = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞: ")
    response = requests.get(f"{API_BASE}/episode/{num}")
    if response.status_code == 200:
        ep = response.json()
        print("–ù–∞–∑–≤–∞–Ω–∏–µ:", ep["name"])
        print("–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:", ep["air_date"])
        print("–ö–æ–¥ —ç–ø–∏–∑–æ–¥–∞:", ep["episode"])
        print("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ (–ø–µ—Ä–≤—ã–µ 5):")
        for c in ep["characters"][:5]:
            cdata = requests.get(c).json()
            print("-", cdata["name"])

        xp += 15
        history.append(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω —ç–ø–∏–∑–æ–¥: {ep['name']}")
    else:
        print("‚ùå –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ø–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏—è
def find_location():
    global xp
    name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏: ")
    params = {"name": name}
    response = requests.get(f"{API_BASE}/location", params=params)
    if response.status_code == 200:
        data = response.json()
        if "results" in data and data["results"]:
            loc = data["results"][0]
            print("–ù–∞–∑–≤–∞–Ω–∏–µ:", loc["name"])
            print("–¢–∏–ø:", loc["type"])
            print("–ò–∑–º–µ—Ä–µ–Ω–∏–µ:", loc["dimension"])
            print("–ñ–∏—Ç–µ–ª–µ–π:", len(loc["residents"]))

            if loc["residents"]:
                print("\n–°–ø–∏—Å–æ–∫ –∂–∏—Ç–µ–ª–µ–π:")
                for url in loc["residents"]:
                    cdata = requests.get(url).json()
                    print("-", cdata["name"])
            else:
                print("–í —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –∂–∏—Ç–µ–ª–µ–π.")

            xp += 10
            history.append(f"–ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {loc['name']}")
        else:
            print("‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("–û—à–∏–±–∫–∞:", response.status_code)

# —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
def random_character():
    global xp
    rid = random.randint(1, 826)
    response = requests.get(f"{API_BASE}/character/{rid}")
    if response.status_code == 200:
        char = response.json()
        print("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!")
        print("–ò–º—è:", char["name"])
        print("–°—Ç–∞—Ç—É—Å:", char["status"])
        print("–í–∏–¥:", char["species"])
        print("–õ–æ–∫–∞—Ü–∏—è:", char["location"]["name"])

        xp += 5
        history.append(f"–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {char['name']}")
    else:
        print("–û—à–∏–±–∫–∞:", response.status_code)

# —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤
def list_episodes():
    global xp
    url = f"{API_BASE}/episode"
    while url:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            for ep in data["results"]:
                print(f"{ep['id']}. {ep['name']} ({ep['episode']})")
            url = data["info"]["next"]
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ø–∏–∑–æ–¥–æ–≤")
            break

    xp += 20
    history.append("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤")

# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—é .json
def save_to_encyclopedia(char, rating=None):
    entry = {
        "name": char["name"],
        "status": char["status"],
        "species": char["species"],
        "location": char["location"]["name"],
        "episodes_count": len(char["episode"]),
    }
    if rating:
        entry["rating"] = rating

    try:
        with open("encyclopedia.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    data.append(entry)

    with open("encyclopedia.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ encyclopedia.json")

# —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂
def compare_characters_infinite():
    global xp, history
    print("\n‚öîÔ∏è –¢—É—Ä–Ω–∏—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π)! –í—ã–±–∏—Ä–∞–π –ª—é–±–∏–º–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    print("–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ 0.\n")

    # —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç
    current_fav_id = random.randint(1, 826)
    response = requests.get(f"{API_BASE}/character/{current_fav_id}")
    if response.status_code != 200:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        return
    current_fav = response.json()

    while True:
        # –Ω–æ–≤—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫
        challenger_id = random.randint(1, 826)
        response = requests.get(f"{API_BASE}/character/{challenger_id}")
        if response.status_code != 200:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            continue
        challenger = response.json()

        print(f"\n–¢–µ–∫—É—â–∏–π —Ñ–∞–≤–æ—Ä–∏—Ç: {current_fav['name']} ({current_fav['species']}, {current_fav['status']})")
        print(f"–°–æ–ø–µ—Ä–Ω–∏–∫: {challenger['name']} ({challenger['species']}, {challenger['status']})")
        choice = input("–ö–æ–≥–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ? (1 ‚Äî —Ñ–∞–≤–æ—Ä–∏—Ç / 2 ‚Äî —Å–æ–ø–µ—Ä–Ω–∏–∫ / 0 ‚Äî –≤—ã–π—Ç–∏): ")

        if choice == "1":
            print(f"‚úÖ –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ {current_fav['name']}")
            history.append(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–≤–æ—Ä–∏—Ç: {current_fav['name']}")
        elif choice == "2":
            current_fav = challenger
            print(f"‚úÖ –¢–µ–ø–µ—Ä—å —Ñ–∞–≤–æ—Ä–∏—Ç: {current_fav['name']}")
            history.append(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–≤–æ—Ä–∏—Ç: {current_fav['name']}")
        elif choice == "0":
            print(f"\nüèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç: {current_fav['name']}!")
            history.append(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç —Ç—É—Ä–Ω–∏—Ä–∞: {current_fav['name']}")
            xp += 20
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            continue

        xp += 5  

# —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂
def filter_characters():
    global xp
    print("\n–§–∏–ª—å—Ç—Ä—ã:")
    print("1 ‚Äì –¢–æ–ª—å–∫–æ –∂–∏–≤—ã–µ")
    print("2 ‚Äì –¢–æ–ª—å–∫–æ –º—ë—Ä—Ç–≤—ã–µ")
    print("3 ‚Äì –¢–æ–ª—å–∫–æ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ")
    choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

    params = {}
    if choice == "1":
        params["status"] = "alive"
    elif choice == "2":
        params["status"] = "dead"
    elif choice == "3":
        params["species"] = "alien"
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    response = requests.get(f"{API_BASE}/character", params=params)
    if response.status_code == 200:
        data = response.json()
        for char in data["results"]:
            print("-", char["name"], f"({char['status']}, {char['species']})")
        xp += 15
        history.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    else:
        print("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

# –ø–æ–∏—Å–∫ —ç–ø–∏–∑–æ–¥–æ–≤ –ø–æ —Å–µ–∑–æ–Ω
def find_episodes_by_season():
    global xp
    season = input("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, S01, S02): ").upper()
    url = f"{API_BASE}/episode"
    while url:
        response = requests.get(url)
        if response.status_code != 200:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ø–∏–∑–æ–¥–æ–≤")
            break
        data = response.json()
        for ep in data["results"]:
            if ep["episode"].startswith(season):
                print(f"{ep['id']}. {ep['name']} ({ep['episode']})")
        url = data["info"]["next"]

    xp += 20
    history.append(f"–ü–æ–∏—Å–∫ —ç–ø–∏–∑–æ–¥–æ–≤ –ø–æ —Å–µ–∑–æ–Ω—É {season}")

# —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç
def random_quest():
    global xp, history
    rid = random.randint(1, 826)
    response = requests.get(f"{API_BASE}/character/{rid}")
    if response.status_code == 200:
        char = response.json()

        print("\nüïπ –°–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç!")
        print("–£–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º:")
        print("–°—Ç–∞—Ç—É—Å:", char["status"])
        print("–í–∏–¥:", char["species"])
        print("–õ–æ–∫–∞—Ü–∏—è:", char["location"]["name"])

        guess = input("–ö—Ç–æ —ç—Ç–æ? ").strip()
        if guess.lower() == char["name"].lower():
            print("‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ –±—ã–ª", char["name"])
            xp += 30
            history.append(f"–£–≥–∞–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –∫–≤–µ—Å—Ç–µ: {char['name']}")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –≠—Ç–æ –±—ã–ª", char["name"])
            history.append(f"–ü—Ä–æ–≤–∞–ª–µ–Ω –∫–≤–µ—Å—Ç (–±—ã–ª {char['name']})")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–∞")

# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    global xp, history
    while True:
        print("\n–ú–µ–Ω—é:")
        print("1 ‚Äì –ù–∞–π—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        print("2 ‚Äì –ù–∞–π—Ç–∏ —ç–ø–∏–∑–æ–¥")
        print("3 ‚Äì –ù–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏—é")
        print("4 ‚Äì –°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")
        print("5 ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ø–∏–∑–æ–¥–æ–≤")
        print("6 ‚Äì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        print("7 ‚Äì –§–∏–ª—å—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        print("8 ‚Äì –ü–æ–∏—Å–∫ —ç–ø–∏–∑–æ–¥–æ–≤ –ø–æ —Å–µ–∑–æ–Ω—É")
        print("9 ‚Äì –°–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç")
        print("0 ‚Äì –í—ã—Ö–æ–¥")
        print()
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == "1":
            find_character()
        elif choice == "2":
            find_episode()
        elif choice == "3":
            find_location()
        elif choice == "4":
            random_character()
        elif choice == "5":
            list_episodes()
        elif choice == "6":
            compare_characters_infinite()
        elif choice == "7":
            filter_characters()
        elif choice == "8":
            find_episodes_by_season()
        elif choice == "9":
            random_quest()
        elif choice == "0":
            print("\nüéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
            print(f"–í–∞—à –æ–ø—ã—Ç: {xp} XP")
            print("–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:")
            for h in history:
                print("-", h)

            # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—è txt
            with open("history.txt", "w", encoding="utf-8") as f:
                for h in history:
                    f.write(h + "\n")

            # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—è .json
            history_with_time = []
            for h in history:
                history_with_time.append({
                    "action": h,
                    "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                })

            with open("history.json", "w", encoding="utf-8") as f:
                json.dump(history_with_time, f, ensure_ascii=False, indent=2)

            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ history.txt –∏ history.json")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

if __name__ == "__main__":
    main()
